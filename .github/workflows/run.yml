name: Run Decoder

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  run-decoder:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: decoder-image:latest
          cache-from: |
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Create output directories
        run: |
          mkdir -p ${{ github.workspace }}/plots/cluster
          mkdir -p ${{ github.workspace }}/results
          chmod -R 777 ${{ github.workspace }}/plots
          chmod -R 777 ${{ github.workspace }}/results

      - name: Check available processors and usage percentage
        id: cpu-check
        run: |
          TOTAL_CPUS=$(nproc)
          USED_CPUS=4
          PERCENT_USED=$(( 100 * USED_CPUS / TOTAL_CPUS ))
          echo "Total available processors: $TOTAL_CPUS"
          echo "Processors used for decoder: $USED_CPUS"
          echo "Percent of processors used: ${PERCENT_USED}%"
          echo "total_cpus=$TOTAL_CPUS" >> $GITHUB_OUTPUT
          echo "percent_used=$PERCENT_USED" >> $GITHUB_OUTPUT

      - name: Run matcher in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -e PYTHONUNBUFFERED=1 \
            decoder-image:latest \
            bash -c "
              set -e
              echo 'Starting matcher run on synthetic data...'
              python3 -m subgraph_matching.train --datase=graph.pkl --node_anchored --batch_size 32 --val_size 320
              echo 'Checking output directories...'
              ls -la /app/results
              ls -la /app/plots
              "

      - name: Check for matcher outputs
        run: |
          echo "Checking matcher outputs in results/ and plots/:"
          ls -lh results/ || echo "No results directory found"
          ls -lh plots/ || echo "No plots directory found"

      - name: Upload matcher outputs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: matcher-results
          path: |
            results/
            plots/
          retention-days: 7
          if-no-files-found: warn

      - name: Upload trainer outputs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trainer-outputs
          path: |
            ckpt/
            runs/
          retention-days: 7
          if-no-files-found: warn

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: decoder-logs
          path: |
            *.log
            *.err
          if-no-files-found: ignore
